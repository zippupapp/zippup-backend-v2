generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  PROVIDER
  VENDOR
  ADMIN
}

enum BookingStatus {
  PENDING
  ACCEPTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  DISPUTED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum EmergencyStatus {
  ACTIVE
  RESOLVED
  FALSE_ALARM
}

enum VerificationStatus {
  UNVERIFIED
  PENDING
  VERIFIED
  REJECTED
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  phone             String    @unique
  password          String?
  name              String
  avatar            String?
  role              UserRole  @default(CUSTOMER)
  isActive          Boolean   @default(true)
  isEmailVerified   Boolean   @default(false)
  isPhoneVerified   Boolean   @default(false)
  latitude          Float?
  longitude         Float?
  address           String?
  city              String?
  country           String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  wallet            Wallet?
  provider          Provider?
  vendor            Vendor?
  customerBookings  Booking[] @relation("CustomerBookings")
  providerBookings  Booking[] @relation("ProviderBookings")
  reviewsGiven      Review[]  @relation("CustomerReviews")
  emergencyContacts EmergencyContact[]
  emergencyAlerts   EmergencyAlert[]
  sentMessages      ChatMessage[] @relation("SentMessages")
  receivedMessages  ChatMessage[] @relation("ReceivedMessages")
  notifications     Notification[]
  transactions      Transaction[]

  @@map("users")
}

model Wallet {
  id            String   @id @default(cuid())
  userId        String   @unique
  balance       Float    @default(0)
  isBlocked     Boolean  @default(false)
  lastTopUp     DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("wallets")
}

model Provider {
  id                String    @id @default(cuid())
  userId            String    @unique
  bio               String?
  availability      Boolean   @default(true)
  serviceCategories String[]
  experience        String?
  hourlyRate        Float?
  rating            Float     @default(0)
  totalJobs         Int       @default(0)
  verificationStatus VerificationStatus @default(UNVERIFIED)
  licenseNumber     String?
  licenseImage      String?
  idDocument        String?
  businessRegistration String?
  faceVerification  String?
  isBlueTickVerified Boolean  @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviews           Review[]  @relation("ProviderReviews")

  @@map("providers")
}

model Service {
  id          String    @id @default(cuid())
  name        String
  category    String
  description String?
  basePrice   Float
  icon        String?
  country     String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  bookings    Booking[]

  @@map("services")
}

model Booking {
  id                String    @id @default(cuid())
  customerId        String
  providerId        String?
  serviceId         String
  title             String
  description       String?
  scheduledAt       DateTime?
  completedAt       DateTime?
  isUrgent          Boolean   @default(false)
  estimatedPrice    Float?
  finalPrice        Float?
  commission        Float?
  status            BookingStatus @default(PENDING)
  paymentStatus     PaymentStatus @default(PENDING)
  
  pickupLatitude    Float?
  pickupLongitude   Float?
  pickupAddress     String?
  dropoffLatitude   Float?
  dropoffLongitude  Float?
  dropoffAddress    String?
  
  chatRoomId        String?
  isLocationSharing Boolean   @default(false)
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  customer          User      @relation("CustomerBookings", fields: [customerId], references: [id])
  provider          User?     @relation("ProviderBookings", fields: [providerId], references: [id])
  service           Service   @relation(fields: [serviceId], references: [id])
  review            Review?

  @@map("bookings")
}

model Review {
  id          String   @id @default(cuid())
  bookingId   String   @unique
  customerId  String
  providerId  String
  rating      Int
  comment     String?
  createdAt   DateTime @default(now())

  booking     Booking  @relation(fields: [bookingId], references: [id])
  customer    User     @relation("CustomerReviews", fields: [customerId], references: [id])
  provider    Provider @relation("ProviderReviews", fields: [providerId], references: [id])

  @@map("reviews")
}

model Transaction {
  id              String        @id @default(cuid())
  userId          String
  type            String
  amount          Float
  description     String?
  status          PaymentStatus @default(PENDING)
  paymentMethod   String?
  transactionRef  String?
  metadata        Json?
  createdAt       DateTime      @default(now())

  user            User          @relation(fields: [userId], references: [id])

  @@map("transactions")
}

model EmergencyContact {
  id          String   @id @default(cuid())
  userId      String
  name        String
  phone       String
  email       String?
  relationship String?
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("emergency_contacts")
}

model EmergencyAlert {
  id              String          @id @default(cuid())
  userId          String
  latitude        Float
  longitude       Float
  address         String?
  status          EmergencyStatus @default(ACTIVE)
  contactsNotified Boolean        @default(false)
  adminNotified   Boolean         @default(false)
  resolvedAt      DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  user            User            @relation(fields: [userId], references: [id])
  tracking        EmergencyTracking[]

  @@map("emergency_alerts")
}

model EmergencyTracking {
  id        String   @id @default(cuid())
  alertId   String
  latitude  Float
  longitude Float
  timestamp DateTime @default(now())

  alert     EmergencyAlert @relation(fields: [alertId], references: [id], onDelete: Cascade)

  @@map("emergency_tracking")
}

model ChatMessage {
  id          String   @id @default(cuid())
  senderId    String
  receiverId  String
  bookingId   String?
  message     String
  messageType String   @default("text")
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())

  sender      User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver    User     @relation("ReceivedMessages", fields: [receiverId], references: [id])

  @@map("chat_messages")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String
  isRead    Boolean  @default(false)
  metadata  Json?
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Vendor {
  id              String   @id @default(cuid())
  userId          String   @unique
  businessName    String
  businessAddress String?
  businessPhone   String?
  businessEmail   String?
  description     String?
  isVerified      Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  products        Product[]
  orders          Order[]

  @@map("vendors")
}

model Product {
  id          String   @id @default(cuid())
  vendorId    String
  name        String
  description String?
  price       Float
  images      String[]
  category    String
  stock       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  vendor      Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  orderItems  OrderItem[]

  @@map("products")
}

model Order {
  id              String        @id @default(cuid())
  customerId      String
  vendorId        String
  totalAmount     Float
  deliveryAddress String
  status          String        @default("pending")
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  customer        User          @relation("CustomerBookings", fields: [customerId], references: [id])
  vendor          Vendor        @relation(fields: [vendorId], references: [id])
  items           OrderItem[]
  dispute         Dispute?

  @@map("orders")
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float

  order     Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Dispute {
  id          String   @id @default(cuid())
  orderId     String   @unique
  reason      String
  description String?
  status      String   @default("open")
  resolvedAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  order       Order    @relation(fields: [orderId], references: [id])

  @@map("disputes")
}

model DigitalService {
  id          String   @id @default(cuid())
  name        String
  type        String
  provider    String
  isActive    Boolean  @default(true)
  commission  Float    @default(5.0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  transactions DigitalTransaction[]

  @@map("digital_services")
}

model DigitalTransaction {
  id              String        @id @default(cuid())
  userId          String
  serviceId       String
  amount          Float
  recipientInfo   Json
  status          PaymentStatus @default(PENDING)
  providerRef     String?
  commission      Float
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  user            User          @relation(fields: [userId], references: [id])
  service         DigitalService @relation(fields: [serviceId], references: [id])

  @@map("digital_transactions")
}
